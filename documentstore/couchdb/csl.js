{"_id":"_design/csl","_rev":"11-4287a9338b94854c821cc16583a9655c","views":{"elastic":{"map":"//----------------------------------------------------------------------------------------\n// START COUCHDB VIEW\n\n//----------------------------------------------------------------------------------------\nfunction removeTags(string, array){\n  return array ? string.split(\"<\").filter(function(val){ return f(array, val); }).map(function(val){ return f(array, val); }).join(\"\") : string.split(\"<\").map(function(d){ return d.split(\">\").pop(); }).join(\"\");\n  function f(array, value){\n    return array.map(function(d){ return value.includes(d + \">\"); }).indexOf(true) != -1 ? \"<\" + value : value.split(\">\")[1];\n  }\n}\n\n//----------------------------------------------------------------------------------------\nfunction add_values(elastic_search_doc, key, value, boost) {\n  elastic_search_doc.search_data.fulltext_values.push(value);\n\n  boosted = (typeof boost !== 'undefined') ? boost : false;\n\n  if (boosted) {\n    elastic_search_doc.search_data.fulltext_boosted_values.push(value);\n  }\n\n  switch (key) {\n    case 'container':\n    case 'author':\n      elastic_search_doc.search_data[key].push(value);\n      break;\n\n    case 'year':\n      elastic_search_doc.search_data[key] = value;\n      break;\n\n    default:\n      break;\n  }\n\n  return elastic_search_doc;\n}\n\n//----------------------------------------------------------------------------------------\nfunction message(doc) {\n  if (doc.message) {\n\n    var elastic_search_doc = {};\n\n    // type of document\n    elastic_search_doc.type = 'work';\n\n    // output to display in list of hits\n    elastic_search_doc.search_result_data = {};\n\n    // possible fields to hold information on how to display this object\n    elastic_search_doc.search_result_data.name = '';\n    elastic_search_doc.search_result_data.description = '';\n    elastic_search_doc.search_result_data.creator = [];\n    elastic_search_doc.search_result_data.thumbnailUrl = '';\n    elastic_search_doc.search_result_data.url = '';\n\n    // temporary field to hold values that we assemble at the end\n    elastic_search_doc.search_result_data.description_parts = [];\n\n    // fields that will be searched on\n    elastic_search_doc.search_data = {};\n    \n    // cluster id for grouping versions of same work \n    elastic_search_doc.search_data.cluster_id = doc._id;\n    \n\tif (doc.cluster_id) {\n\t  elastic_search_doc.search_data.cluster_id = doc.cluster_id;\n\t}\n\n    // text fields for searching on\n    elastic_search_doc.search_data.fulltext_values = [];\n    elastic_search_doc.search_data.fulltext_boosted_values = [];\n\n    // things to use as facets\n    elastic_search_doc.search_data.container = [];\n    elastic_search_doc.search_data.author = [];\n    elastic_search_doc.search_data.year = null;\n    \n\n\n    // title\n    // multiple languages?\n    if (doc.message.multi && doc.message.multi._key.title) {\n      var title = [];\n      for (var language in doc.message.multi._key.title) {\n        title.push(doc.message.multi._key.title[language]);\n        elastic_search_doc = add_values(elastic_search_doc, 'title', doc.message.multi._key.title[language], true);\n      }\n      elastic_search_doc.search_result_data.name = title.join(' / ');\n    } else {\n      if (doc.message.title) {\n        if (Array.isArray(doc.message.title)) {\n          elastic_search_doc = add_values(elastic_search_doc, 'title', doc.message.title[0], true);\n\n          elastic_search_doc.search_result_data.name = removeTags(doc.message.title[0]);\n        } else {\n          elastic_search_doc = add_values(elastic_search_doc, 'title', doc.message.title, true);\n\n          elastic_search_doc.search_result_data.name = removeTags(doc.message.title);\n        }\n      }\n    }\n\n    // container\n    if (doc.message.multi && doc.message.multi._key['container-title']) {\n      var container = [];\n\n      for (var language in doc.message.multi._key['container-title']) {\n        container.push(doc.message.multi._key['container-title'][language]);\n        elastic_search_doc = add_values(elastic_search_doc, 'container', doc.message.multi._key['container-title'][language], true);\n      }\n      elastic_search_doc.search_result_data.description_parts.push('in ' + container.join(' / '));\n\n    } else {\n\n      if (doc.message['container-title']) {\n        var container = '';\n        if (Array.isArray(doc.message['container-title'])) {\n          // handle case (e.g., PeerJ preprints) where container is null\n          if (doc.message['container-title'].length > 0) {\n            container = doc.message['container-title'][0];\n          }\n        } else {\n          container = doc.message['container-title'];\n        }\n        if (container != '') {\n          elastic_search_doc = add_values(elastic_search_doc, 'container', container, true);\n          elastic_search_doc.search_result_data.description_parts.push('in ' + container);\n        }\n      }\n    }\n\n    // abstract\n    if (doc.message.multi && doc.message.multi._key.abstract) {\n      for (var language in doc.message.multi._key.abstract) {\n        elastic_search_doc = add_values(elastic_search_doc, 'abstract', doc.message.multi._key.abstract[language], false);\n      }\n    } else {\n      if (doc.message.abstract) {\n        elastic_search_doc = add_values(elastic_search_doc, 'abstract', doc.message.abstract, false);\n      }\n    }\n\n\n    // author\n    if (doc.message.author) {\n      for (var i in doc.message.author) {\n        // do we have multiple languages?\n        if (doc.message.author[i].multi) {\n          var author = [];\n          for (var language in doc.message.author[i].multi._key.literal) {\n            elastic_search_doc = add_values(\n              elastic_search_doc,\n              'author', doc.message.author[i].multi._key.literal[language], true);\n            author.push(doc.message.author[i].multi._key.literal[language]);\n\n          }\n          elastic_search_doc.search_result_data.creator.push(author.join(' / '));\n        } else {\n          // simple case\n          \n          // Handle ORCID concatenating names by ignoring them\n          var ok = true;\n          \n            if (doc.message.author[i].literal) {\n\n              if (doc.message.author[i].literal.match(/\\s+and\\s+/)) {\n                ok = false;\n              }\n\n              if (doc.message.author[i].literal.match(/\\s+et al\\s+/)) {\n                ok = false;\n              }\n            }          \n          \n          if (ok) {\n\t\t\t  var name = [];\n\n\t\t\t  if (doc.message.author[i].given) {\n\t\t\t\tname.push(doc.message.author[i].given);\n\t\t\t  }\n\t\t\t  if (doc.message.author[i].family) {\n\t\t\t\tname.push(doc.message.author[i].family);\n\t\t\t  }\n\n\n\n\t\t\t  // just use literal if we have it\n\t\t\t  if (doc.message.author[i].literal) {\n\t\t\t\tname = [doc.message.author[i].literal];\n\t\t\t  }\n\n\t\t\t  if (name.length > 0) {\n\t\t\t\tadd_values(elastic_search_doc, 'author', name.join(' '), true);\n\t\t\t\telastic_search_doc.search_result_data.creator.push(name.join(' '));\n\t\t\t  }\n\t\t\t}\n        }\n      }\n\n    }\n\n    //------------------------------------------------------------------------------------\n\n    // date\n    if (doc.message.issued) {\n      if (doc.message.issued['date-parts']) {\n        var year = doc.message.issued['date-parts'][0][0];\n\n        elastic_search_doc = add_values(elastic_search_doc, 'year', year);\n\n        elastic_search_doc.search_result_data.description_parts.push('in ' + year);\n      }\n    }\n\n    // volume\n    if (doc.message.volume) {\n      elastic_search_doc = add_values(elastic_search_doc, 'volume', doc.message.volume);\n      elastic_search_doc.search_result_data.description_parts.push('in volume ' + doc.message.volume);\n    }\n\n    // issue\n    if (doc.message.issue) {\n      elastic_search_doc = add_values(elastic_search_doc, 'issue', doc.message.issue);\n      elastic_search_doc.search_result_data.description_parts.push('issue ' + doc.message.issue);\n    }\n\n    // page\n    if (doc.message.page) {\n      elastic_search_doc = add_values(elastic_search_doc, 'page', doc.message.page);\n      var prefix = 'page';\n      if (doc.message.page.match(/-/)) {\n        prefix = 'pages';\n      }\n      elastic_search_doc.search_result_data.description_parts.push(prefix + ' ' + doc.message.page);\n    }\n\n    // DOI\n    if (doc.message.DOI) {\n      elastic_search_doc = add_values(elastic_search_doc, 'doi', doc.message.DOI);\n\n      elastic_search_doc.search_result_data.doi = doc.message.DOI;\n    }\n    \n    // URL\n    if (doc.message.URL) {\n      elastic_search_doc.search_result_data.url = doc.message.URL;\n    }\n\n    //------------------------------------------------------------------------------------\n\n    // cleanup\n    elastic_search_doc.search_data.fulltext = elastic_search_doc.search_data.fulltext_values.join(' ');\n    delete elastic_search_doc.search_data.fulltext_values;\n\n    elastic_search_doc.search_data.fulltext_boosted = elastic_search_doc.search_data.fulltext_boosted_values.join(' ');\n    delete elastic_search_doc.search_data.fulltext_boosted_values;\n\n    elastic_search_doc.search_result_data.description = 'Published ' + elastic_search_doc.search_result_data.description_parts.join(', ');\n    delete elastic_search_doc.search_result_data.description_parts;\n\n    // no journal\n    if (elastic_search_doc.search_data.container.length == 0) {\n      delete elastic_search_doc.search_data.container;\n    }\n\n    // no authors\n    if (!elastic_search_doc.search_result_data.creator) {\n      delete elastic_search_doc.search_result_data.creator;\n    }\n\n    if (!elastic_search_doc.search_result_data.thumbnailUrl) {\n      delete elastic_search_doc.search_result_data.thumbnailUrl;\n    }\n\n    if (!elastic_search_doc.search_result_data.url) {\n      delete elastic_search_doc.search_result_data.url;\n    }\n\n    emit(doc._id, elastic_search_doc);\n\n  }\n}\n\nfunction (doc) {\n  if (doc['message-format']) {\n\n    // ORCID work\n    if (doc['message-format'] === 'application/vnd.citationstyles.csl+json') {\n      message(doc);\n    }\n\n    // CrossRef\n    if (doc['message-format'] === 'application/vnd.crossref-api-message+json') {\n      message(doc);\n    }\n\n  }\n}\n\n// END COUCHDB VIEW            "},"modified":{"map":"function (doc) {\n  if (doc['message-format']) {\n\n    // ORCID work\n    if (doc['message-format'] === 'application/vnd.citationstyles.csl+json') {\n      emit(doc['message-modified'], doc._id);\n    }\n\n    // CrossRef\n    if (doc['message-format'] === 'application/vnd.crossref-api-message+json') {\n      emit(doc['message-modified'], doc._id);\n    }\n\n  }\n}"}},"language":"javascript"}
